// Database Schema for Chatter Application
// Updated to match actual SQLModel implementation

Table user {
  id int [pk, increment]
  username varchar [unique, not null]
  firstname varchar [not null]
  lastname varchar [not null]
  date_of_birth datetime
  email varchar [unique, not null]
  status varchar [not null, default: 'active'] // active or inactive
  hashed_password varchar [not null]
  type int [default: 0] // 0 = regular user, 1 = admin
  force_password_reset boolean [default: false] // Admin can force password reset on next login
  password_reset_code varchar // One-time code for password reset (generated by admin)
  code_expires_at timestamp // Expiration timestamp for reset code (24 hours from generation)
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
  last_login timestamp // Last login time for engagement tracking
}

table accountlog {
  id int [pk, increment]
  user_id int [not null]
  action varchar [not null] // created, updated, activated, deactivated, deleted
  field_changed varchar // specific field that was changed
  old_value varchar // previous value
  new_value varchar // new value
  changed_by int // user_id of who made the change
  changed_at timestamp [default: `now()`]
  ip_address varchar
  user_agent varchar
}

table like {
  id int [pk, increment]
  url varchar [not null]
  user_id int [not null]
}

table comment {
  id int [pk, increment]
  url varchar [not null]
  content varchar [not null]
  created_at timestamp [default: `now()`]
  user_id int [not null]
  is_flagged boolean [default: false] // Whether comment has been flagged for review
  flag_count int [default: 0] // Number of times comment has been reported
  flag_reasons text // JSON string of report reasons
  is_hidden boolean [default: false] // Admin can hide abusive comments
  reviewed_at timestamp // When admin reviewed the flagged comment
  reviewed_by int // Admin who reviewed the comment
}

table pageview {
  id int [pk, increment]
  url varchar [not null]
  ip_address varchar [not null]
  viewed_at timestamp [default: `now()`]
  user_agent text
}

table projects {
  id int [pk, increment]
  title varchar
  author int
}

table steps {
  id int [pk, increment]
  project_id int
}

table media {
  id int [pk, increment]
  filename varchar
  project_id int
}

// Relationships
Ref: accountlog.user_id > user.id [delete: cascade]
Ref: accountlog.changed_by > user.id [delete: set null]
Ref: like.user_id > user.id [delete: cascade]
Ref: comment.user_id > user.id [delete: cascade]
Ref: comment.reviewed_by > user.id [delete: set null]
Ref: projects.author > user.id
Ref: steps.project_id > projects.id
Ref: media.project_id > projects.id

// Notes
// pageview table tracks all page visits for analytics
// Materialized view page_view_counts aggregates view counts by URL for performance
