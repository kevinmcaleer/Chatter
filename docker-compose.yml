version: '3.8'

services:
  # Chatter Application
  app:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    image: chatter:latest
    container_name: chatter-app
    restart: unless-stopped
    ports:
      - "8006:8006"
    environment:
      # Application settings
      - ENVIRONMENT=production
      - PORT=8006

      # Database connection
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}

      # JWT Secret (generate with: python3 -c "import secrets; print(secrets.token_hex(32))")
      - SECRET_KEY=${SECRET_KEY}

      # CORS settings
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://kevsrobots.com}

    volumes:
      # Mount data directory for SQLite (if used for development)
      - ./data:/app/data

      # Mount logs directory
      - ./logs:/app/logs

    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chatter-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (optional - remove if using external database)
  postgres:
    image: postgres:16-alpine
    container_name: chatter-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-kevsrobots_cms}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5433}:5432"
    networks:
      - chatter-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: chatter-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - chatter-network
    profiles:
      - with-nginx  # Only start with: docker-compose --profile with-nginx up

volumes:
  postgres-data:
    driver: local

networks:
  chatter-network:
    driver: bridge
